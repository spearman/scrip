#!/bin/bash

HELP="\
scrip <filename> [<filetype>] [flags]
scrip -h, --help
--
    Filetypes
c, cpp (cc), sh
--
    General flags
-f          force overwrite of existing files
-h|--help   help
--
    Specific flags

    c, cpp (cc)
-H          create a header file
-s          create a source file
-m          create a source file with main function and and
                no header inclusion if filename==main
-u          create pair of files for a compilation unit
-t          create named struct

    sh
-x          create file with xtrace set
"

create_c_header () {
    #
    # Create a new header with inclusion guards
    #

    if [[ $# != 3 ]] ; then
        echo "error: create_c_header() requires 3 arguments"
        exit 1
    fi

    extension=$1
    name=$2
    overwrite=$3
    filename=$2$'.'$1

    name_upper=$(echo $name | tr [:lower:] [:upper:])
    ext_upper=$(echo $extension | tr [:lower:] [:upper:])

    guard=$name_upper$'_'$ext_upper

    if [[ -e $filename ]] && ! $overwrite ; then
        echo "error: file already exists"
        exit 1
    fi

    echo \
$'#ifndef '$guard$'\n'\
$'#define '$guard$'\n'\
$'\n'\
$'#endif'\
    > $filename

    if [[ !(-e $filename) ]] ; then
        echo "error: file not created"
        exit 1
    fi

}

create_c_src () {
    #
    # Create a new source file with corresponding header inclusion
    #

    if [[ $# != 3 ]] ; then
        echo "error: create_c_src() requires 3 arguments"
        exit 1
    fi

    extension=$1
    name=$2
    filename=$2$'.'$1
    overwrite=$3

    if [[ -e $filename ]] && ! $overwrite ; then
        echo "error: file already exists"
        exit 1
    fi

    echo \
$'#include "'$name$'.h"'\
    > $filename

    if [[ !(-e $filename) ]] ; then
        echo "error: file not created"
        exit 1
    fi

    exit
}

create_sh_script () {
    #
    # Create a new .sh file with bash shebang and execute permission.
    #

    if [[ $# != 3 ]] ; then
        echo "error: create_sh_script() requires 3 arguments"
        exit 1
    fi

    extension=$1
    name=$2
    overwrite=$3
    filename=$2$'.'$1

    if [[ -e $filename ]] && ! $overwrite ; then
        echo "error: file already exists"
        exit 1
    fi

    echo $'#!/bin/bash' > $filename

    if [[ !(-e $filename) ]]
    then
        echo "error: file not created"
        exit 1
    fi

    chmod +x $filename
}

#
#   main
#

if [[ $# < 1 || $# > 3 ]] ; then
    echo "error: syntax is 'scrip <filename> [<filetype>] [flags]' or 'scrip -h' for help"
    exit 1

fi

case $1 in

-h|--help)
    echo "$HELP"
    exit ;;

*)
    ;;

esac

filename=$1
filetype=$2

filename=$(basename "$name")
extension="${filename##*.}"
name="${filename%.*}"

##temp
echo $filename
echo $extension
echo $name

# boolean flags

header=false
src=false
script=false
overwrite=false
struct=false
xtrace=false
main=false

header_ext=
src_ext=
script_ext=

# flags

genflags=fh

cflags=Hmstu

shflags=x

specflags=

case $filetype in
c)
    header_ext=h
    src_ext=c
    specflags=$cflags ;;

cpp|cc)
    header_ext=hh
    src_ext=cc
    specflags=$cflags ;;

sh)
    specflags=$shflags
    script=true
    script_ext=sh ;;
esac

# process flags

ind_shift=0
case $# in
1)
    ;;
2)
    ind_shift=1 ;;
3)
    ind_shift=2 ;;
esac

OPTIND=$((OPTIND+2))

while getopts $genflags$specflags o
do
    case $o in
    f)
        overwrite=true ;;
    H)
        header=true ;;
    m)
        main=true
        src=true ;;
    s)
        src=true ;;
    t)
        struct=true ;;
    u)
        header=true
        src=true
        unit=true ;;
    x)
        xtrace=true ;;
    h)  ;;
    esac
done

if ! $header && ! $src && ! $script ; then
    echo "error: no files specified"
    exit 1
fi

if $header ; then
    create_c_header $header_ext $name $overwrite
fi

if $src ; then
    create_c_src $src_ext $name $overwrite
fi

if $script ; then
    create_sh_script $script_ext $name $overwrite
    if $xtrace ; then
        echo $'\nset -x' >> $name$'.'$script_ext
    fi
fi

exit
