#!/bin/bash

HELP="\
scrip - file creation utility

scrip <filename> [<filetype>] [flags]
scrip -h, --help
--
    Filetypes
c, c++, sh
--
    General flags
-f          force overwrite of existing files
-q          quiet mode: don't list files created
--
    Specific flags

    c, c++
-H          create a header file
-s          create a source file
-m          create a source file with main function and
                no header inclusion if filename==main
-u          create pair of files for a compilation unit
-t          create named struct

    sh
-x          create file with xtrace set
-b          specify a different shell in /bin/ (default bash)
"

create_c_header () {
    #
    # Create a new header with inclusion guards
    #

    if [[ $# != 5 ]] ; then
        echo "error: create_c_header() requires 5 arguments"
        return 1
    fi

    directory=$1
    extension=$2
    name=$3
    overwrite=$4
    quiet=$5

    filename=$3$'.'$2
    fullpath=$directory'/'$filename

    name_upper=$(echo $name | tr [:lower:] [:upper:])
    ext_upper=$(echo $extension | tr [:lower:] [:upper:])

    guard=$name_upper$'_'$ext_upper

    if [[ -e $fullpath ]] && ! $overwrite ; then
        echo "error: $fullpath already exists, use -f to overwrite"
        return 1
    fi

    echo "\
#ifndef $guard
#define $guard

#endif"\
    > $fullpath

    if [[ !(-e $fullpath) ]] ; then
        echo "error: file not created"
        return 1
    fi

    if ! $quiet ; then
        echo "created file $fullpath"
    fi

    return
}

create_c_src () {
    #
    # Create a new source file with corresponding header inclusion
    #

    if [[ $# != 6 ]] ; then
        echo "error: create_c_src() requires 6 arguments"
        return 1
    fi

    directory=$1
    extension=$2
    header_ext=$3
    name=$4
    overwrite=$5
    quiet=$6

    filename=$4$'.'$2
    fullpath=$directory'/'$filename

    if [[ -e $fullpath ]] && ! $overwrite ; then
        echo "error: $fullpath already exists, use -f to overwrite"
        return 1
    fi

    echo "\
#include \"$name.$header_ext\""\
    > $fullpath

    if [[ !(-e $fullpath) ]] ; then
        echo "error: file not created"
        return 1
    fi

    if ! $quiet ; then
        echo "created file $fullpath"
    fi

    return
}

create_sh_script () {
    #
    # Create a new .sh file with bash shebang and execute permission.
    #

    if [[ $# != 6 ]] ; then
        echo "error: create_sh_script() requires 6 arguments"
        return 1
    fi

    directory=$1
    extension=$2
    shell=$3
    name=$4
    overwrite=$5
    quiet=$6

    filename=$4$'.'$2
    fullpath=$directory'/'$filename

    if [[ -e $fullpath ]] && ! $overwrite ; then
        echo "error: $fullpath already exists, use -f to overwrite"
        return 1
    fi

    echo "\
#!/bin/$shell"\
    > $fullpath

    if [[ !(-e $fullpath) ]]
    then
        echo "error: file not created"
        return 1
    fi

    chmod +x $fullpath

    if ! $quiet ; then
        echo "created file $fullpath"
    fi

    return
}

#
#   main
#

if [[ $# < 1 ]] ; then
    echo "error: syntax is 'scrip <filename> [<filetype>] [flags]' or 'scrip -h' for help"
    exit 1

fi

case $1 in

    -h|--help)
        echo "$HELP"
        exit
    ;;

    *)
    ;;

esac

# boolean flags

header=false
src=false
script=false
overwrite=false
quiet=false
struct=false
xtrace=false
main=false

# filenames

filename=$1
filetype=$2

directory=$(dirname "$filename")
filename=$(basename "$filename")
extension="${filename##*.}"
name="${filename%.*}"

# no-extension check

if [[ $extension == $filename ]] ; then
    extension=
fi


header_ext=
src_ext=
script_ext=

header_filename=
src_filename=
script_filename=

shell='bash'

# flags

genflags='fhq'
cflags='Hmstu'
shflags='xb:'
specflags=

# check filetype

known_filetype=false

case $filetype in

    c|c++|cc|cpp|sh)
        known_filetype=true
    ;;

    *)
    ;;

esac

# extension

case $extension in

    # c

    c)
        src_ext='c'
        src=true
    ;;&

    h)
        header_ext='h'
        header=true
    ;;&

    c|h)
        if ! $known_filetype ; then
            filetype='c'
        fi
    ;;

    # c++

    cc)
        header_ext='hh'
        src_ext='cc'
    ;;&

    cpp)
        header_ext='hpp'
        src_ext='cpp'
    ;;&

    cc|cpp)
        src=true
    ;;&

    hh)
        header_ext='hh'
        src_ext='cc'
    ;;&

    hpp)
        header_ext='hpp'
        src_ext='cpp'
    ;;&

    hh|hpp)
        header=true
    ;;&

    cc|hh)
        if ! $known_filetype ; then
            filetype='cc'
        fi
    ;;&

    cpp|hpp)
        if ! $known_filetype ; then
            filetype='cpp'
        fi
    ;;

    # sh

    sh)
        script=true
        if ! $known_filetype ; then
            filetype='sh'
        fi
    ;;

    *)
    ;;

esac

# filetype

case $filetype in

    c)
        header_ext='h'
        src_ext='c'
    ;;&

    cc)
        if [[ $header_ext == '' || $extension == $src_ext ]] ; then
            header_ext='hh'
        else
            header_ext=$extension
        fi
        if [[ $src_ext == '' ]] ; then
            src_ext='cc'
        fi
    ;;&

    c++|cpp)
        if [[ $header_ext == '' || $extension == $src_ext ]] ; then
            header_ext='hpp'
        else
            header_ext=$extension
        fi
        if [[ $src_ext == '' ]] ; then
            src_ext='cpp'
        fi
    ;;&

    c|c++|cc|cpp)
        specflags=$cflags
    ;;

    sh)
        specflags=$shflags
        script=true
        script_ext='sh'
    ;;

    *)
        echo "error: could not determine filetype"
        exit 1
    ;;

esac

# filenames

header_filename=$name'.'$header_ext
src_filename=$name'.'$src_ext
script_filename=$name'.'$script_ext

header_fullpath=$directory'/'$header_filename
src_fullpath=$directory'/'$src_filename
script_fullpath=$directory'/'$script_filename

# process flags

flags_found=false

while (($OPTIND <= $#)) ; do

    while getopts $genflags$specflags o ; do

        flags_found=true

        case $o in

            b)
                shell=$OPTARG
            ;;

            f)
                overwrite=true
            ;;

            H)
                header=true
            ;;

            m)
                main=true
                src=true
            ;;

            q)
                quiet=true
            ;;

            s)
                src=true
            ;;

            t)
                struct=true
            ;;

            u)
                header=true
                src=true
                unit=true
            ;;

            x)
                xtrace=true
            ;;

            h)
                echo "\
ignoring -h: use -H for headers
help syntax: scrip -h, scrip --help"
            ;;

        esac

    done

    OPTIND=$((OPTIND+1))

done

# if no flag or extension was provided, set defaults

if ! $header && ! $src && ! $script ; then
    case $filetype in

        c++|c|cc|cpp)   # default c family: create compilation unit
            header=true
            src=true ;;

        sh)         # default shell: create script
            script=true ;;

    esac
fi

# messages for invalid options

if ! $header && $struct ; then
    echo "ignoring -t struct: no header file created"
fi

# file creation

if $header ; then
    create_c_header $directory $header_ext $name $overwrite $quiet
    if $struct ; then
        head -n -1 $header_fullpath > $header_fullpath'.tmp'
        cat $header_fullpath'.tmp' > $header_fullpath
        rm $header_fullpath'.tmp'
        echo "\
struct $name;

struct $name
{

};

#endif"\
        >> $header_fullpath
    fi
fi

if $src ; then
    create_c_src $directory $src_ext $header_ext $name $overwrite $quiet
fi

if $script ; then
    create_sh_script $directory $script_ext $shell $name $overwrite $quiet
    if $xtrace ; then
        echo "\
set -x"\
        >> $name$'.'$script_ext
    fi
fi

# exit

exit
